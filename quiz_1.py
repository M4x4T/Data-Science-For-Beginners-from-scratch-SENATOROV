"""Ответы на вопросы."""

#
#
#
# """Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ)""":
#
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# Ответ: из группы ТГ HomeWork.
# 2) Как принять домашку?
# Ответ: нужно обновить репозиторий(fetch origin).
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# Ответ: нужна для просмотра историю всех коммитов.
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Ответ:Открыть в новом окне браузера последний комит и скопировать ссылку
# 4) Что такое файл лога?
# Ответ: Файл для отслеживания прогресса по выполненным заданиям(нужно записывать весь прогресс туда)
# 4.1) Когда нужно его пушить?
# Ответ: Нужно заполнять в конце каждого урока
# 5) Что такое интерпритатор?
# Ответ: Это программа которая читает и запускает исходный код
# 6) Где можно выбрать интерпритатор?
# Ответ: Справа на верху с помощью "Select Kernel"
# 7) Что такое модуль?
# Ответ: модуль это файл с исходным кодом имеющее своё пространство имён
# 8) Как создать и отправить коммит?
# Ответ: по команде "git add ." (добавляет в отслеживание), "git commit -m 'сообщения коммита'"
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# Ответ: Зайти на Github Desktop и посмотреть "History"
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# Ответ: "pre-commit run --all-files"
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# Ответ: "pylint-проверяет по чекерам", "pydocstyle-проверяет докстринги по умолчанию PEP-257"
# 11) Как узнать какой именно линтер не прошёл проверку?
# Ответ: В терминале выводится код ошибки и номер ячейки
# 12) Линтер Pylint видит markdown?
# Ответ: Нет
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# Ответ: Да может отличаться по причине того что "pylint" игнорирует "markdown"
# 14) Где посмотреть номер ячейки в vscode?
# Ответ: Снизу с права "Cell"
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# Ответ: В формате JSON, GitHub рендерит .ipynb (на странице файла) прочитав JSON и отобразив как тетрадь (HTML). Он не конвертирует и хранит оригинальный JSON.
# 16) Где посмотреть в какой ячейке ошибка?
# Ответ: Запустить в терминале "pre-commit run --all-files" посмотреть вывод там выводится код ошибки и номер ячейки
# 17) Как запустить терминал?
# Ответ: Terminal>New Terminal
# 18) Что такое линтер?
# Ответ: Линтер — это как грамматический редактор для кода он проверяет правильно ли всё написано и соответствует ли код определённым стандартам.
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# Ответ: https://pylint.readthedocs.io/en/stable/
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# Ответ: после исправления pylint
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# Ответ: Описания модуля(файла)
# 21) С какой  git команды начинается утро программиста?
# Ответ: "git pull"
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# Ответ: Нажимаем правой кнопкой мыши на левый угол где написано имя репозитория и выбираем "Open in Vs code/Cursor"
# 23) Что такое stash?
# Ответ: Буфер куда мы временно сохраняем файлы от анг: тайник
#   Общее объяснение концепции.
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
# Ответ: "git stash"
#   Кнопка в vs code:
# Ответ: нажимаем на иконку "Source Control(веточка с кружком)" в открывшемся панели с права нажимаем "More actions(три точки) и выбираем Stash"
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
# Ответ: Github>Changes>Stashed Changes>Restore
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# Ответ: "git stash apply"
# 23.3) Различие между стэшем и коммитом.
# Ответ:"stash" сохраняет изменения в буфере и не добавляет в версию а "commit" изменяет сразу версию
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
# Ответ: Если это черновик который не должен попасть в историю версии то надо стэшить а если код хотябы работает и объясняемый то коммитить
# 23.4) Как просмотреть список сохраненных стэшей?
# Ответ: "git stash list"
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#
# 23.5) Как удалить стэш?
# Ответ: "git stash drop"
#   Команды для удаления отдельных стэшей или всех сразу.
# Ответ: "git stash drop", "git stash drop stash@{'номер'}"
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# Ответ: Конфликт локального изменения и изменения из Github
# 24) Где посмотреть что есть конфликт в файлах?
# Ответ: после push посмотреть раздел "Changes>Stashed Changes"
# 24.1) Когда он появляется?
# Ответ: когда мы уже локально изменили файл и при этом обновили репозиторий и у нас появляется конфликт изменений
# 25) Как решить конфликт в файлах?
# Ответ: временно стэйшим локальные изменения получаем новую версию с Github и востанавливаем локальные изменения с помощью "Restore"
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# Ответ: Зелёное то что пришло с гитхаба
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Ответ: Да
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Ответ: конфликт изменений
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# Ответ: 3, "Accept Current Change(то что пришло с Гитхаб)", "Accept Incoming Change(Локальные изменения)", "Accept Both Changes(Принять оба сразу 'нежелательно')"
# 29) Что делает кнопка complete merge?
# Ответ: Устраняет кофликт
# 30) В какой чат нужно писать если остались вопросы?
# Ответ: В чат "HELP ME (bags&reports)"
# 31) Что такое FORK? Зачем его делают?
# Ответ: Копия чужого репозитория на свой аккаунт Github, Нужен для дальнейшего процесса клонирования(скачивания) и работы с этим проектом
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# Ответ: по команде "git clone"
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# Ответ: С вероятностью 90% были решены студентами и автором курса(Сенаторов Руслан)
# 34) Как создать файл в vs code?
# Ответ: Нажимаем на значок файла в левом углу
# 35) Файл лога нужно заполнять в конце каждого урока?
# Ответ: Да
#
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# Ответ: "jupytext --to py имя_файла.ipynb"
#
#
# подсказка https://t.me/c/1937296927/1/26527 (нету)
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# Ответ: Пакетный менеджер инструмент для скачивания, обновления и управления постороними библиотеками и пакетами
# 3) Почему расширение py лучше чем ipynb?
# Ответ:  файл с расширением ".py" можно запустить в любом IDE где установлен python а чтобы открыть ".ipyvnb" нужно ещё установить "jupyter lab", "jupyter notebook"
# 4) Что такое pep8?
# Ответ: Документ с правилами для написания понятного кода
# подсказка:https://peps.python.org/pep-0008/
# 4.1) линтеры проверяют на соблюдение pep8?
# Ответ: Да но не только
# 4.2) Какая нотация используется для создания переменных?
# Ответ: Нижний змеиный регистр
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Ответ: Нет
# 4.4) Зачем и где мы используем андерскор _
# Ответ: Для разделения имён переменных по соглашению PEP8
# 4.5) По PEP8 допустима переменная в одну букву?
# Ответ: Нет
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#
