"""Choosing clear names for variables, functions, and classes."""

# ## Компактные, содержательные имена важны для удобочитаемости вашей программы
#
# Если вы пишете не «одноразовый» код, который вы не собираетесь сопровождать
# после однократного запуска программы, вам стоит подумать над выбором хороших
# имен в вашей программе. Выбор имен — субъективный выбор, который делаете именно вы.
# Автоматизированные средства форматирования (такие как Black) не способны
# решить, как должны называться ваши переменные.
#
# #### Схемы регистра имен
#
# - Змеиный регистр `snake_case` разделяет слова символом подчеркивания.
#
# - Верблюжий регистр `camelCase` — слова записываются в нижнем регистре,
# но второе и следующие слова начинаются с заглавной.
#
# - Схема Pascal `PascalCase` — названа так, потому что применяется в языке
# программирования Pascal; аналогична схеме верблюжьего регистра, но первое
# слово в ней тоже начинается с заглавной.
#
#
# #### Соглашения об именах PEP 8
#
# **•** Все буквы должны быть буквами ASCII — то есть латинскими буквами
# верхнего и нижнего регистров без диакритических знаков.
# **•** Имена модулей должны быть короткими состоять только из букв нижнего регистра.
# **•** В схеме должны записываться
# **•** Имена классов необходимо записывать в схеме Pascal
# **•** Имена констант следует записывать в верхнем змеином регистре
# **•** Имена функций, методов и переменных записывают в нижнем змеином
# регистре
# **•** Приватные атрибуты классов всегда начинают с символа подчеркивания ( _ )
#
#
# #### Длина имен
#
# Имена не должны быть слишком короткими или слишком длинными. Так как код читают чаще, чем пишут, лучше все-таки задавать более длинные имена переменных. Не пропускайте буквы в своем коде. устаревшей считается венгерская запись — практика включения сокращения типа данных в имена. Например, имя `strName` указывает, что
# переменная содержит строковое значение. Современные языки и IDE могут предоставить программисту информацию о типе данных без этих префиксов
#
#
#
# #### Выбирайте имена, пригодные для поиска
#
# Чтобы имя было найдено немедленно, создавайте уникальные имена с более длинными именами переменных, которые содержат конкретную информацию. Лучше всего писать код, понятный тем, для кого английский язык не является родным, то есть прямолинейно, традиционно и без юмора.
#
#
#
# #### Не заменяйте встроенные имена
#
# Никогда не используйте встроенные имена Python для своих переменных. Наиболее часто заменяемые имена Python — all, any, date, email, file, format, hash,
# id, input, list, min, max, object, open, random, set, str, sum, test и type. Не берите их для своих идентификаторов. Другая распространенная проблема — присваивание файлам .py имен, совпадающих с именами сторонних модулей.
#
#
# #### Итоги
#
# Выбор имен не имеет никакого отношения к алгоритмам или компьютерной теории, и все же это важнейший фактор написания удобочитаемого кода. В конечном счете выбор имен, используемых в вашем коде, остается на ваше усмотрение, но вы
# должны учитывать существующие рекомендации. В PEP 8 вы найдете несколько
# соглашений о выборе имен — например, имена в нижнем регистре для модулей
# и имена в схеме Pascal для классов. Имена не должны быть слишком короткими
# или слишком длинными. Однако часто лучше сделать имя избыточным, чем недостаточно содержательным
#
# Имена упрощают чтение кода людьми, а не выполнение его компьютерами. Если
# ваш код хорошо читается, он будет понятным. Если он понятен, его легко изменить.
# А если его легко изменить, вам будет проще исправить ошибки или добавить новые
# возможности. Использование понятных имен — основополагающий фактор разработки качественного программного обеспечения.
