"""Конспект по GitHub Issues."""

# ### Общие вопросы:
#
# 1.Что такое Issues на GitHub и для чего они используются?
# #Система для отслеживания задач основные функции управлять, обсуждать, отслеживать рабочие вопросы
# 2.Чем Issues отличаются от других инструментов управления задачами?
# #Автоматический связывает коммиты и пулл реквесты, отслеживает изменения в коде связанная с конкретной задачей, удобно использовать для обсуждения кода
# 3.Какие основные компоненты (поля) есть у каждого Issue?
# #заголовок, описание, метки (labels), исполнители (assignees), вехи (milestones) и комментарии.
#

# ### Создание Issues:
#
# 1.Как создать новое Issue в репозитории?
# #Repository>Issues>New Issues
# 2.Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
# #цель, инструкции, майлстон, прикрепить отвественого
# 3.Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# #ошибка(bug), улучшение(enhancement), документация(documentation), нужна помошь(help wanted)
# 4.Как прикрепить Assignees (ответственных) к Issue?
# #на боковой панели Issue в разделе Assignees выберите одного или нескольких пользователей
#

# ### Работа с Issues:
#
# 1.Как использовать Labels для классификации задач?
# #Метки используются для фильтрации и организации Issues
# 2.Для чего нужен Milestone, и как связать его с Issue?
# #Чтобы связать Issue с вехой, выберите её на боковой панели в разделе Milestone, это группа Issues, объединённая общей целью, например, сроком или версией релиза
# 3.Как привязать Issue к пул-реквесту (Pull Request)?
# #(#<номер ишьюса>)
# 4.Как добавить комментарий к существующему Issue?
# #внизу страницы Issue в поле комент

# ### Закрытие и завершение Issues:
#
# 1.Как закрыть Issue вручную?
# #Closes: #<номер ишью>
# 2.Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
# #Closes/Fixes/Resolves: <номе ишью>
# 3.Как повторно открыть закрытое Issue, если работа ещё не завершена?
# #нажимаем на Reopen issue

# ### Фильтрация и поиск:
#
# 1.Как найти все открытые или закрытые Issues в репозитории?
# #в строке поиска используйте is:open, is:closed.
# 2.Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
# #В строке поиска используйте синтаксис: label:bug, assignee:username, milestone:version-1.0
# 3.Как сортировать Issues по приоритету, дате создания или другим параметрам?
# #выпадающее меню Sort в правой части страницы Issues, чтобы отсортировать по Newest (новые), Oldest (старые), Most commented (самые комментируемые) и другим критериям

# ### Интеграции и автоматизация:
#
# 1.Как настроить автоматические уведомления о новых или изменённых Issues?
# #в разделе Notifications можно выбрать, о каких событиях вы хотите получать уведомления
# 2.Что такое Projects в контексте GitHub, и как связать их с Issues?
# #помогают визуально отслеживать прогресс задач вы можете добавлять Issue на доску Project и перемещать его между колонками (To do, In progress, Done).
# 3.Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
# #GitHub Actions, Webhooks позволяют автоматизировать рутинные задачи, такие как назначение меток, закрытие неактивных Issues или создание новых

# ### Коллаборация:
#
# 1.Как упомянуть другого пользователя в комментарии к Issue?
# #@username и GitHub отправит этому пользователю уведомление
# 2.Как запросить дополнительные данные или уточнения у автора Issue?
# #комментарий в Issue, используя @username автора или отметить нужные строки кода и коментировать
# 3.Что делать, если Issue неактуально или его нужно объединить с другим?
# #если Issue неактуально, его можно просто закрыть. Если оно дублирует другое, его можно закрыть, сославшись на оригинальный Issue

# ### Практические аспекты:
#
# 1.Как использовать шаблоны для создания Issues?
# #В репозитории можно создать папку .github и в ней файл ISSUE_TEMPLATE.md, который будет содержать определённую структуру для новых Issues
# 2.Что такое Linked Issues, и как создать связь между задачами?
# #способ указать на связь между двумя или более Issues  используя символ # и номер Issue.
# 3.Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
# #Lead Time Это помогает измерить, насколько быстро команда способна решать задачи, Cycle Time Время, которое Issue находится в работе (с момента, когда его назначили исполнителю, до закрытия)
# 4.Какие best practices рекомендуются при работе с Issues в команде?
# #однозначные заголовки, назначайте ответственных, используйте метки, обновляйте статус, закрывайте неактуальные Issues.
